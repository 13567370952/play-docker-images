如何写出 585 字节的 logo 打印 Docker 镜像
作者：朱凌墨 2016-07-20 20:26
夏天到了，蜂巢产品也迎来了新的一批T恤衫。上面印制的命令 docker run hub.c.163.com/public/logo 也并不只是个样子，在配置好 docker 环境的机器上执行这条命令确实也是可以打印蜂巢的字符画 logo 的。细心的你可能已经发现了，这个镜像只有 585 字节。那么问题来了，如何打造这样小、但能够正常运行且达到打印 logo 效果的镜像？下面将会为大家带来制作该镜像的心路历程。

序

既然需要打印 logo，那么最先要做的就是把 logo 对应的字符画搞出来。这个处理还是十分简单的，随便到网上 Google 一下 ascii art convert online，在出现的结果中尝试几个最终选一个将图片转换后效果最好的版本，再修一修就可以了。既然字符画准备好了，我们就可以开始构思如何实现镜像了。在说正题之前，我们先简单确认一下 Docker 容器的运行方式。我们从 Docker 官方文档以及其他书籍、博客文章等可以非常清楚的了解，Docker 中的进程是在单独的 PID namespace 中运行的。这样有一点就十分明确了，在 Docker 容器中的进程是可以只依赖宿主机内核的。这样，既然我们只是需要打印一个 logo，那么我们的基础镜像就没有必要使用任何系统镜像了。换句话说，Dockerfile 已经确定了形式：

FROM scratch
ADD ./logo /
ENTRYPOINT ["/logo"]
CMD []
其中，FROM scratch 表示基础镜像为空镜像，除了 Docker 元信息什么都没有。然后把外部编译好的 logo 可执行文件放到镜像中，设定好入口就可以跑了。

所以，我们终于来到了编码环节。首先简单用C写一个打印 logo 的程序。为了让程序在打印完 logo 后能够卡住不退出，所以我们可以使用 POSIX 的 pause() 调用。因为使用空镜像，没有各种库支持，所以尽量使用系统调用。

#include <unistd.h>

static char logo[] =
/* 上述logo变成字符串，并在每行末尾加上\n转义，省略 */
;

int main() {
    write(1, logo, sizeof(logo) - 1);
    while (1) {
        pause();
    }
    return 0;
}
确实，上述代码应该已经足够了。但是，为了让我们的程序能够在空镜像中跑起来，可执行文件最终只可以静态链接（因为镜像里并没有动态链接库）。另外，为了适应所有情况，生成32位可执行文件是更保险的选择。所以，我们执行如下命令：

gcc -m32 -Os -o logo logo.c
然后我们就得到了静态链接后的 logo 可执行文件。跑起来没什么问题，我们再来看看大小：

ls -al logo
-rwxr-xr-x 1 root root 735388 Jul 7 17:35 logo
好，打完镜像之后我们可以看到镜像大小大致为 735.4 KB。和动辄几百兆的系统镜像比已经小很多了。但是，我们这只是一个打印 logo 的，不管怎么说这么大的可执行文件里面肯定有很多无用的执行码被链接进来了，一定有办法消减。另外，当把镜像跑起来后，一个神奇的现象发生了——本来按 Ctrl + C 能够停掉的进程，在容器里停不下来了(╯`□′)╯︵ ┻━┻

破

我们目前的首要问题突然间变成了如何能够让容器停下来。其实还是很简单的。打开一个新的终端，通过docker ps得到当前容器的ID，然后通过 docker rm -fv <之前拿到的容器ID> 来强制关掉容器就好了。

所以，为什么会出现这个现象呢？我们回想一下前面提到过的 Docker 容器内进程执行方式。它们是在一个单独的 PID namespace 里实现隔离的。同时，在这个 PID namespace 里，通过 ENTRYPOINT CMD 跑起来的容器里的初始进程的 namespace 内 PID 为 1。

好了，回顾一下操作系统的知识，POSIX 兼容的系统中 PID 为 1 的进程有什么特殊性呢？接受孤儿进程；其他所有进程的所在进程树一直往根回溯应该都到这个进程；它死了所有进程都会被 KILL；它的所有子进程在执行结束成为僵尸进程时要对此时的 SIGCHLD 进程作出反应，把这些僵尸进程 reap 掉；没有对 SIGINT 和 SIGTERM 的默认动作……

当键盘输入 Ctrl + C 时，系统做的实际上是向当前进程发出 SIGINT 信号。然而，我们的代码并没有对任何信号的监听函数注册，所以，我们需要增加一个信号监听。为了方便之后的进一步改动，并不使用 signal() 函数，而是转而使用更加安全的 sigaction() 函数。代码变成了这个样子：

#include <unistd.h>
#include <signal.h>

static char logo[] =
/* 上述logo变成字符串，并在每行末尾加上\n转义，省略 */
;

void sigint_handler(int ignored) {
    exit(0);
}

int main() {
    struct sigaction act = {};
    act.sa_handler = sigint_handler;

    if (sigaction(SIGINT, &act, NULL) < 0)
        return 1;
    write(1, logo, sizeof(logo) - 1);
    while (1) {
        pause();
    }
    return 0;
}
现在我们再打一次镜像，终于可以正常运行、也能够正常通过 Ctrl + C 退出了。然而，我们还有一个亟待解决的问题，那就是过于冗余的标准库。为了解决这个问题，我们可以不再使用标准库。然而，不使用标准库带来了几个问题：

入口函数不再是 main()，而是 void _start()，并且返回时需要调用 exit() 系统调用。
由于没有了标准库，write()``pause()``sigaction() 都没了直接的封装……所有的系统调用都需要自己封装。
那么如何封装系统调用呢？按照 Intel 32 位下 Linux 的约定，%eax 保存调用对应的编号并作系统调用返回，%ebx``%ecx``%edx``%esi``%edi``%ebp 顺序放入所有的调用参数，最后执行 syscall 或 int $0x80 指令陷入内核。所以，经过改变之后，我们的代码可以变成这个样子（其中 sigaction() 较为复杂，本文不做具体讨论，并在下文中封装为一个直接注册 sigint_handler() 的函数）

#include <unistd.h>
#include <signal.h>

#define SA_RESTORER 0x04000000

struct kernel_sigaction {
    __sighandler_t k_sa_handler;
    unsigned long sa_flags;
    void (*sa_restorer) (void);
    sigset_t sa_mask;
};

static char logo[] =
/* 上述logo变成字符串，并在每行末尾加上\n转义，省略 */
;

static int my_write(int fd, const void *buf, size_t size) {
    long result;
    __asm__ __volatile__(
        "int $0x80"
        : "=a"(result)
        : "0"(__NR_write), "b"(fd), "c"(buf), "d"(size)
        : "cc", "memory");
    return result;
}

static inline int my_pause() {
    long result;
    sigset_t mask = {};
    __asm__ __volatile__(
        "int $0x80"
        : "=a"(result)
        : "0"(__NR_rt_sigsuspend), "b"(&mask), "c"(_NSIG / 8)
        : "cc", "memory");
    return result;
}

static void __restore_rt() {
    __asm__ __volatile__ ("mov    $0xf,%eax\n\t"
                          "syscall");
}

static inline void my_exit(int code) {
    __asm__ __volatile__(
        "int $0x80"
        :
        : "a"(__NR_exit)
        : "cc", "memory");
    __builtin_unreachable(); // syscall above never returns
}

void sigint_handler(int ignored) {
    my_exit(0);
}

static inline int my_sigint() {
    long result;
    struct kernel_sigaction kact = {};

    kact.k_sa_handler = sigint_handler;
    kact.sa_flags = SA_RESTORER;
    kact.sa_restorer = __restore_rt;

    __asm__ __volatile__(
        "int $0x80"
        : "=a"(result)
        : "0"(__NR_rt_sigaction), "b"(SIGINT), "c"(&kact), "d"(0), "S"(_NSIG / 8)
        : "cc", "memory");

    return result;
}

void _start() {
    my_sigint();

    my_write(1, logo, sizeof(logo) - 1);

    while (1) {
        my_pause();
    }
}
在编译时再加上 -nostdlib 选项，去掉标准库，完成后运行后万事 OK，打完镜像大小也就只有 8.736 kB 了。离我们的最终目标近了一大步。

急

接下来是真正的挑战，如何将镜像缩减至最终的 585 字节。

首先可以想到的是改变 logo 的存储、打印方式。不再将字符画作为字符串整体存储在可执行文件中再直接打印，而是提取元信息。我们这个字符画很明显，只有空格和加号两个状态，并且整行的宽度小于 128，那么我们可以按顺序记录空格或加号的个数，换行时为了标识在这个个数上再加128。同时，因为在每行最后一个加号后面的空格存在是没有意义的，所以没有必要保存这些空格数目保存。

这样关于字符画的记录就缩减至 201 字节。当然这样操作执行指令必然会增加，因为需要从元数据转化成真正的图片，但是增幅远远小于字符画到元数据的减幅。于是，代码变成这个样子：

#include <stddef.h>
#include <syscall.h>
#include <signal.h>
#include <stdint.h>

#define SA_RESTORER 0x04000000

struct kernel_sigaction {
    __sighandler_t k_sa_handler;
    unsigned long sa_flags;
    void (*sa_restorer) (void);
    sigset_t sa_mask;
};

uint8_t pic_meta[] = {/*字符画元数据*/};

static int my_write(int fd, const void *buf, size_t size)
{
    long result;
    __asm__ __volatile__(
        "int $0x80"
        : "=a"(result)
        : "0"(__NR_write), "b"(fd), "c"(buf), "d"(size)
        : "cc", "memory");
    return result;
}

static inline int my_pause()
{
    long result;
    sigset_t mask = {};
    __asm__ __volatile__(
        "int $0x80"
        : "=a"(result)
        : "0"(__NR_rt_sigsuspend), "b"(&mask), "c"(_NSIG / 8)
        : "cc", "memory");
    return result;
}

static void __restore_rt() {
    __asm__ __volatile__ ("mov    $0xf,%eax\n\t"
                          "syscall");
}

static inline void my_exit(int code)
{
    __asm__ __volatile__(
        "int $0x80"
        :
        : "a"(__NR_exit)
        : "cc", "memory");
    __builtin_unreachable(); // syscall above never returns
}

void sigint_handler(int ignored) {
    my_exit(0);
}

static inline int my_sigint() {
    long result;
    struct kernel_sigaction kact = {};

    kact.k_sa_handler = sigint_handler;
    kact.sa_flags = SA_RESTORER;
    kact.sa_restorer = __restore_rt;

    __asm__ __volatile__(
        "int $0x80"
        : "=a"(result)
        : "0"(__NR_rt_sigaction), "b"(SIGINT), "c"(&kact), "d"(0), "S"(_NSIG / 8)
        : "cc", "memory");

    return result;
}

void _start()
{
    char buf[8];
    int i, j, flip = 0;

    my_sigint();

    for (i = 0; i < sizeof(pic_meta); i++) {
        size_t len = pic_meta[i];
        if (len > 128) {
            len -= 128;
            my_write(1, "\n", 1);
            flip = 0;
    }
        for (j = 0; j < len; j++) {
            my_write(1, flip ? "+" : " ", 1);
        }
        flip = !flip;
    }
    my_write(1, "\n", 1);

    while (1) {
        my_pause();
    }
}
然后，我们做编译。这次，我们要增加很多选项。在 Linux 中，可执行文件是通过 ELF 格式封装的。通过 readelf -a <可执行文件> 可以查看可执行文件的各种 ELF 元信息和每个段的内容。其中 .text 为程序执行用指令段，.data 为程序自带的数据段，.rodata 为程序自带的只读数据段，其余的段对我们这个程序没有任何作用。为了消除这些不必要的段，我们执行如下命令，将它们尽量排除：

gcc -m32 -Os -s -static -nostdlib -fno-builtin -fomit-frame-pointer -fno-ident -fno-asynchronous-unwind-tables -c logo.c
strip -gR .note.GNU-stack logo.o
ld -melf_i386 -x -s -o logo logo.o
其中，gcc -Os 的作用是为空间优化。这时我们的可执行文件已经只有 820 字节了。完成后通过 readelf 可以看到除了 .shstrtab 就只有必要的段了。.shstrtab 的作用是保存 Section Header 的字符串名称。同时，ELF 中的 Section Header 只是方便可读使用的，对于真正的程序执行没有任何作用，放在了 ELF 文件的最后。这样总体上我们的可执行文件结构就变成了 ELF 头、Program Header、.text、.rodata、.data、.shstrtab、Section Header。所以，我们可以根据 .shstrtab 的偏移量，将 .shstrtab 和 Section Header 一并删去，节约最后的空间。在我们这个 logo 的例子里，.shstrtab 的偏移量是 0x249，那么这个可执行文件中必要的部分就是 0x0 - 0x248 共 0x249 = 585 字节。所以最后我们只需要：

dd bs=1 count=585 if=logo of=tempFile; mv tempFile logo; chmod +x logo
再次执行 logo，正常运行，再次打镜像，我们的 585 字节镜像诞生了！

回顾整个过程，我们需要熟悉 POSIX 中对 PID 为 1 的进程的特殊要求，系统调用的具体实现，以及 Linux 下可执行文件 ELF 格式的结构。 当然，我也相信这个镜像还有更加精简的余地，不过那样需要做更多的细小工作，所以就到此截止了。相信这篇文章能抛砖引玉，给大家带来一些新的思路。如果我的描述等有问题，也请多多指正。谢谢大家。

参考：

Smallest x86 ELF Hello World (That I could achieve)

GCCが出力した小さなバイナリからsection headerを除去したりする話
